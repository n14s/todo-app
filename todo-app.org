#+TITLE: Todo App
* Why a Todo App
** Easy existing UI. Can fokus on the dev process and the other technical parts (data handling)
** Offers knowledge needed for building own fullstack apps, especially CRUD concepts

* Architecture
** Frontend/Web: Svelte
** Hosting/API: Svelte Kit
*** Prisma
** DB: Postgres
** Deployment (Web): Vercel
** Deployment (DB): Railway
** Dev: Gitpod
** Interactions
*** Svelte - Svelte Kit
- Svelte Kit exposes APIs
- Svelte Frontend requests GET /todos to Svelte Kit
- Svelte Kit responses with JSON

*** Svelte Kit (+Prisma) - Postgres
- Svelte Kit requests data from Postgres
- Prisma acts as a translator beween JS objects and SQL commands

*** Dataflow/Commandflow

| File/Function                  | Description                                   | Networking                        |
|--------------------------------+-----------------------------------------------+-----------------------------------|
| index.svelte/todo-item.svelte  | provide forms, retrieves backend data on load | Send POST/GET to Svelte inter-api |
|--------------------------------+-----------------------------------------------+-----------------------------------|
| *.ts                           | prepare fetch data, forward to api            | Receive POST/GET from .svelte     |
| enhance, together with form.ts | stops usual, updates frontend only            |                                   |
|--------------------------------+-----------------------------------------------+-----------------------------------|
| (*.ts=>) _api.ts               | build fetch command                           | Send POST/GET/?/?/ to Backend     |


* Generel Web Dev
** Dev Process
[[id:b33d4592-6d82-4b38-93a0-d5abadfce1ba][Generell Dev Process documented here]]
*** Create issue to add feature
- Create branch for issue/feature
- Can use [[id:616143af-d87d-4aaa-a429-5c9377f58c74][Gitpod]]  for an encapsulated environment for issue

*** How to run
**** npm install
**** npm run dev

** Make Website work HTML-only and javascript enhanced
- html-only is backwards compatible, not needing performant hardware
- javascript enhaces user experience, eg. forms with ajax (for those who have js activated in browser)
*** Replace html form redirect to page refresh with ajax request
**** Svelte actions
- path: src/lib/actions/forms.ts
- create action funtions in forms.ts, eg. enhance
- import ~<action-function>~ in svelte script
- activate on element with ~use:<action-function>~
***** Communication between .svelte and action-function
- reference to that element (eg form) is then created for the action-function
- other references can be passed to the action-function , eg. for a dynamic process on the website without reload
  - in .svelte add: ~use:a-f{{<function-var> : <function-name> }}~
  - in action-function add: ~export const a-f = (form:... , {<function-var>}) => {}~
** Debugging
*** Difference debugging for Client side and server side
- client side server can be debugged in browser dev tools
- server side can be debugged in the server runtime environment
- Example:
  - console.log output can only be seen in the console of the respective runtime
  - Client side functions will only log to Browser console
  - SS like Api function will only log to "npm run dev" terminal

*** CS
- Set breakpoints in DevTools
- watch vars in "scopes" tab

*** SS
- set ~debugger;~ stopping marks in code
- run: ~node --inspect node_modules/.bin/svelte-kit dev~
- attach debugger to process id (eg. in vscode)
**** command shortcut
add to package.json:
- "debugger": "NODE_OPTIONS=\"--inspect\" svelte-kit dev"
run:
- npm run debugger
**** technical background
- node_modules/.bin/svelte-kit dev is the actual command that gets run when running npm run dev
- this is defined in the scripts in package.json

*** Source
https://www.youtube.com/watch?v=ubeOpB9FlZE
* Svelte
Svelte compiles svelte files into pure javascript. Thus very little overhead and good performance on browserside.
** Files
*** package.json
**** scripts
**** devDependencies
- no prod-dependencies for svelte needed, they are just devdependencies since svelte is a compiler that translates the code to js
*** svelte.config.js
**** preprocess
**** kit
***** adapter
- where/how to host app: svelte-auto, vercel, cloudflare
***** target
- where is app rendered
*** src/app.html
**** div id=svelte %svelte.body%
- this is where index.svelte is rendered into
*** src/routes/index.svelte
- index = landing page
- apply html, js, or css specific for this route, i.o.w. it only applies to this component
*** src/routes/otherpage.svelte
- file based routing (http://dings.de/otherpage)
- other pages can be created here

*** __layout.svelte
- apply comon html, js or css to all routes, eg. import app.css within script tags


*** tsconfig.json
- is populated by svelte team (remember the option use ts in the beginning ;))

*** styles
**** src/app.css
***** :root{}
- class selector, equivalent to html{}
- more autority than html: can override html properties even if declared before

** Easy animations
Add animation annotation to element, eg. scale or fade
https://www.twilio.com/blog/all-you-need-to-know-svelte
** API in Svelte
*** Define route through file/folder name
- routes/*.svelte default to html website retrieved with get
- routes/<endpoint>/index.json.ts create endpoint for the <endpoint> folder name

*** Define API: Create Crud methods
- create and export arrow/lambda function for get, post, etc
- return object; else it returns 404 to user
- use typescript, in this case the imported RequestHandler, to get goodies like autocomplete/suggestions/helpinfo

#+begin_src js
export const get : RequestHandler = () => {
    return {
        status: 200,
        body: "Hello to API"
    }
}
#+end_src

- use formData as an interface to form, field and values in html, eg. to get the text inserted in text field of form
#+begin_src js
export const post : RequestHandler = await ({request}) => {
    const formData = await request.formData
    console.log(formData.get(''))
}
#+end_src

- ({request}) is object deconstruction. makes nested request field/object usable in function declarion

*** Call API
- fetch endpoint
- use res field/methods for desired behavior
#+begin_src js
const res = await fetch(/<endpoint>)
console.log(res.json())
#+end_src
*** Use 303 (redirect) on post request
- post to an "/<endpoint>" endpoint, would route you to that endpoint upon a 200
- most of the times you want to stay on the current site
- use status: 303 to redirect to current site, or defined by header: { location: "/"}

*** _api helper file
- share objects on different endpoints by storing it in a helper file
- place api logic in _api file
- svelte ignores _<file> in routes (doesnt create site or endpoint)

*** route with dynamic path
- routes with variable path can be create on runtime
- variable part with bracekts ~[uid].json.ts~
- can be populated with ~params.~

*** method override delete, put, etc
- delete, etc dont exist as default form request types
- when defining route in ts use "del" as http verb (delete is reserved in js)
- define methodOverride in svelte.config.js
** Properties in Svelte
- props are used to pass data between components

~export let count~ defines prop count that can be filled from other component
prop count is then usually used in the html

* HTML
** toggle using forms

** form data (action, method)
- send data defined in forms from client to server
- action: where sending data, eg. endpoint "/data.json"
- method: request method, eg. "get", "post"

* CSS
** size
*** em vs rem
- em: size rel. to parent font size
- rem: size rel. to root font size
- default font size of html object is 16
*** height
- main goal: let html and body element grow with content
- mordern technique: only style body to use height: 100vh
[[cite:&HTMLVsBody2021]]
*** width
- either ignore, because defaults to 100%
- or remove margins and set to 100% afterwards
** position
*** margin
- position or center elements
- top left bottom right
- 4rem auto 0 auto, centers the element horizontally with a margin at the top
** media queries (@media)
- conditionally apply style
*** example
#+begin_src css
@media (min-width 720) {
    h1 {
        font-size: 2.4rem;
            }
}
#+end_src

- if condition width>720, then setting font size of h1 applies

** change upon action
- only applys css if action is true

#+begin_src css
my-element:focus-visible {
    font-color: red
}
#+end_src

** selectors
*** type
html element type
#+begin_src css
<div>
div { font-color: blue}
#+end_src
*** class
group added to different elements
#+begin_src css
<div class="myclass">
.myclass { font-color: blue}
#+end_src
*** id
specific single element
#+begin_src css
<div id="myid">
#myid { font-color: blue}
#+end_src

** specifity
- styles of higher specifity override others
*** !important
- high specifity can be overridden with !important style decoration

** sibling/child (+ / >)
*** sibling selector
#+begin_src css
h1 + p {}
#+end_src
- applies style to any p that is a direct sibling of h1
*** child selector
#+begin_src css
h1 > p {}
#+end_src
- applies style to any p that is a direct child of h1
** dynamic styling
- htmls class name can get added dynamically
- css selector may apply on added class only, thus only activating when class name is added
 #+begin_src css
.done .toggle {
    color: red
}
<h1 class="toggle"> or
<h1 class="done toggle"> after adding done dynamically
#+end_src

** set conditional class (svelte)
- class is conditionally set by reading bool from var
- ~class:done={todo.done}~
- it's either set to "done" or to "", toggling the "done" class
- replaces messy string manipulation ~"class= ... {todo.done ? 'done' : ''}"~

* JS
** map as match replace
#+begin_src js
todos = todos.map(todo => {
                if (todo.uid === requestEvent.params.uid) {
                    todo.text = data.text as string
                }
            return todo
            })
#+end_src
** filter
*** rm todos that dont match
#+begin_src js
todos = todos.filter( todo => todo.uid !== requestEvent.params.uid)
#+end_src

** cast string to bool
var isTrueSet = (myValue === 'true')

** variables and scopes
*** var
- global scope
- scope can lead to side effects/bugs
*** let
- block scope
- preferable since js 6
*** const
- black scope
- cannot be updated
- object fields cant be updated, but object field values can

*** hoisting
- execution context property: compile phase runs before execution phase
-
 compile phase includes declarations, eg: ~var number;~
- execution phase includes assignments, eg: ~number = 42;~
- thus the following code behaves:
#+begin_src js
function greet() {
    greeting = "hi";
    console.log(greeting);
    var greeting;
}
greet(); // hi
#+end_src

- also works for function declaration
- hoisted var is assigned undefined, hoisted let, const are not assigned

** loops
*** for in
- loops over array randomly
*** for of
- retains the array order while looping
*** each (svelte only)
#+begin_src svelte
{#each todos as todo}
console.log(todo)
{/each}
#+end_src

** reactivity $:
- is triggered by assignment of var, eg. count
- array functions like push dont trigger reactivity
*** declarations
#+begin_src js
count = 0 ;
$: double = count * 2

count = 5 // double = 10
#+end_src

- double always updates upon count change
*** statements
~$: console.log(count)~
- statement is triggered upon count change

** Typescript
*** handle exceptions to function parameter type
- some function may need more gerenell objects to be passed
- use the lowest common denominator object, eg. Record<string, unknown>
- correct typescripts type errors by casting type with <var> as <type>, eg. todo.text as string

*** ts use type assertion instead of type casting
- using ts types and syntax like ~done = body.done as boolean~ is used to assert the type to conform ts typechecker
- variables contain no implicit type like static typed language
* Refactor 1: Use Python FastAPI Backend with Python Prisma Client
** Test Driven Approach for Python Parts
*** Resources
**** TDD
https://testdriven.io/blog/fastapi-crud/
https://www.jeffastor.com/blog/testing-fastapi-endpoints-with-docker-and-pytest
https://www.fastapitutorial.com/blog/unit-testing-in-fastapi/
https://github.com/akhsiM/tdd-fastapi-docker
**** Unit Testing
https://medium.com/fastapi-tutorials/testing-fastapi-endpoints-f7e78f09b7b6
** Integrate Prisma
*** Resources
https://github.com/RobertCraigie/prisma-client-py/tree/main/examples/fastapi-basic

other site
** Other projects for orientation
https://github.com/pkruszynski/sveltekit-fastapi-docker-compose
https://github.com/heliumbrain/fastapi-piccolo

** Project Structure
*** Dividing Frontend and backend
*** FastApi Project Structure
**** tree
your_project
├── __init__.py
├── main.py
├── core
│   ├── models
│   │   ├── database.py
│   │   └── __init__.py
│   ├── schemas
│   │   ├── __init__.py
│   │   └── schema.py
│   └── settings.py
├── tests
│   ├── __init__.py
│   └── v1
│       ├── __init__.py
│       └── test_v1.py
└── v1
    ├── api.py
    ├── endpoints
    │   ├── endpoint.py
    │   └── __init__.py
    └── __init__.py

**** source
https://stackoverflow.com/questions/64943693/what-are-the-best-practices-for-structuring-a-fastapi-project

** Methods
*** Use multiple schemes to support all needed request bodys of CRUD operations
if different CRUD operations require different bodys, schemes can be added accordingly

pydantic model classes can use inheritance to mitigate code duplication

use ~bigObject(**small_object.dict(), missing_val="foo")~ to initiate bigger objects using the fields of smaller object with additional parameters

**** applied to todos
***** variant 1: base
todoBase: (used as in)
text

todoDB(todoBase) (used for db)
text
...
...

***** variant 2: no base
todoIn:
text

todoDB: (before prisma)
text
created_at
done

todoOut:
text
created_at
done
id

**** source
https://github.com/tiangolo/full-stack-fastapi-postgresql/blob/master/%7B%7Bcookiecutter.project_slug%7D%7D/backend/app/app/schemas/user.py

https://stackoverflow.com/questions/59920126/rest-api-in-python-with-fastapi-and-pydantic-read-only-property-in-model

*** Body vs Field vs query vs path
https://stackoverflow.com/questions/64932222/when-where-to-use-body-path-query-field-in-fastapi

*** Replace default form post for json post instead
- add event handler to submit of form, using its id
- prevent default submit procedure
- post as json instead

- svelte offers ~on:submit={myHandler}~ directive for a short addition of handler
- svelte also offers ~|~ character to add modifiers
- modifier ~on:submit|preventDefault={handleSubmit}~ suppresses default event and adds custom event handler

- additionally ~event.stopImmediatePropagation()~ needed to prevent POST request with form object
**** Source
https://simonplend.com/?p=152
https://dev.to/amjadmh73/submit-html-forms-to-json-apis-easily-137l

https://svelte.dev/docs#template-syntax-element-directives-on-eventname=

https://www.twilio.com/blog/all-you-need-to-know-svelte



** NoJS vs Enhance
*** Enhance
- usually default
- 2 advantages regarding costumability
  - allows changing request data from form data to json, which is important for backend
  - allows adjust request method through fetch
**** How can correct method be invoked
- method override doesnt work
- maybe parse correct method manually through action query parameter
*** NoJS
- would be cool to support as well
**** DONE Check if fastapi backend can accept form by passing it as a different argument
- seems not be compatible with pydantic
CLOSED: [2022-05-26 Do 16:17]

** TODO POST/DEL/PUT not working
*** Debug

*** Problem Ideas
**** uid in Path
- uid in path sent to backend
**** empty data in api.ts
- no data can be seen when debugging
**** requests method not translated in svelte

** Next
*** DONE Adjust Delete endpoint in backend
*** TODO Add Patch
**** TODO Fix missing instant checkmark when clicking done
